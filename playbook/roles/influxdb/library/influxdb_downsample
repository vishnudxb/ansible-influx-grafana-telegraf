#!/usr/bin/python

DOCUMENTATION = '''
---
module: influxdb_downsample
short_description: Aggregates metrics based on the graphite retentions format
description:
   - Adds or removes a user from a InfluxDB database.
options:
  login_user:
    description:
      - The username used to authenticate with
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with
    required: false
    default: null
  login_host:
    description:
      - Host running the database
    required: false
    default: localhost
  login_port:
    description:
      - Host port running the database
    required: false
    default: 8086
  database:
    description:
      - Give permissions to this database and create it if it doesn't exist
    default: None
    required: true
  retentions:
    description:
      - Graphite style aggregate retentions. e.g. 30s:rp_60d,1m:rp_52w => time_aggregate1:retention_policy1,time_aggregate2:retention_policy2
    default: None
    required: true
  measurements:
    description:
      - measurements to downsample
    default: None
    required: true
  prune:
    description:
      - remove all continuous queries not created by this module
    default: false
    required: false
  state:
    description:
      - delete everything created by this module
    default: present
    required: false


notes:
   - Requires the influxdb Python package on the remote host: pip install influxdb

requirements: [ 'influxdb' ]
author: 'Timothy Allen (@allen13)'
'''

EXAMPLES = """
# downsample system_load1
- influxdb_downsample: login_user=admin login_password=admin database=telegraf retentions=30s:60d,1m:52w measurements=[{'measurement':'system', 'fields': ['load1']}]
"""

try:
    from influxdb import InfluxDBClient
    from influxdb.exceptions import InfluxDBClientError
except ImportError:
    influxdb_found = False
else:
    influxdb_found = True


class InfluxDBDownsample:

    def __init__(self, module):
        params = module.params

        self.client = InfluxDBClient(
            params['login_host'],
            params['login_port'],
            params['login_user'],
            params['login_password'])

        # 30s:rp_30d,1m:rp_1y => [['30s','rp_30d'],['1m','rp_1y']]
        self.retentions = [retention.split(':') for retention in params['retentions'].split(',')]
        self.database = params['database']
        self.measurements = params['measurements']
        self.existing_continuous_queries = []
        self.state = params['state']
        self.prune = params['prune']

        self.module = module

    def get_default_policy_name(self):
        default_policy = [policy
                            for policy in self.client.get_list_retention_policies(self.database)
                            if policy['default'] == True][0]
        return default_policy['name']

    def build_downsampled_fields(self, fields):
        downsampled_fields = map(lambda field: "mean(%(field)s) AS %(field)s" % locals(), fields)
        return ', '.join(downsampled_fields)

    def continuous_query_template(self, measurement, aggregate_measurment, time_aggregate, retention_policy):
        database = self.database
        default_policy_name = self.get_default_policy_name()
        downsampled_fields = self.build_downsampled_fields(measurement['fields'])
        measurement_name = measurement['measurement']

        return "CREATE CONTINUOUS QUERY %(aggregate_measurment)s ON %(database)s BEGIN SELECT %(downsampled_fields)s INTO %(database)s.%(retention_policy)s.%(aggregate_measurment)s FROM %(database)s.%(default_policy_name)s.%(measurement_name)s GROUP BY time(%(time_aggregate)s), * END" % locals()

    def query_existing_continous_queries(self):
        return list(self.client.query("SHOW CONTINUOUS QUERIES")[self.database])

    def get_existing_continuous_queries(self):
        if len(self.existing_continuous_queries) > 0:
            return self.existing_continuous_queries
        else:
            self.existing_continuous_queries = self.query_existing_continous_queries()
            return self.existing_continuous_queries

    def continuous_query_exists(self, query_name):
        return any([query['name'] == query_name
                    for query in self.get_existing_continuous_queries()])

    def continuous_query_matches(self, query_name, generated_query):
        existing_query = [query['query']
                            for query in self.get_existing_continuous_queries()
                            if query['name'] == query_name][0]
        return existing_query == generated_query

    def drop_continuous_queries(self, measurement):
        changed = False
        if len(self.query_existing_continous_queries()) > 0:
            for retention in self.retentions:
                time_aggregate = retention[0]
                aggregate_measurment = '%s_%s' % (measurement, time_aggregate)

                if self.continuous_query_exists(aggregate_measurment):
                    self.drop_continuous_query(aggregate_measurment)
                    changed = True

        return changed

    def drop_continuous_query(self, aggregate_measurment):
        self.client.query(
            "DROP CONTINUOUS QUERY %s ON %s" %
            (aggregate_measurment, self.database))

    def create_continuous_queries(self, measurement):
        changed = False

        for retention in self.retentions:
            time_aggregate = retention[0]
            retention_policy = retention[1]
            aggregate_measurment = '%s_%s' % (measurement['measurement'], time_aggregate)

            continuous_query = self.continuous_query_template(measurement, aggregate_measurment, time_aggregate, retention_policy)

            if not self.continuous_query_exists(aggregate_measurment):
                self.client.query(continuous_query)
                changed = True
            else:
                if not self.continuous_query_matches(
                        aggregate_measurment, continuous_query):
                    self.drop_continuous_query(aggregate_measurment)
                    self.client.query(continuous_query)
                    changed = True

        return changed

    def generate_continous_query_names(self):
        continous_query_names = []
        for measurement in self.measurements:
            for retention in self.retentions:
                time_aggregate = retention[0]
                aggregate_measurment = '%s_%s' % (measurement['measurement'], time_aggregate)
                continous_query_names.append(aggregate_measurment)

        return continous_query_names

    def prune_continuous_queries(self):
        changed = False

        existing_continuous_query_names = [query['name'] for query in self.query_existing_continous_queries()]
        new_continuous_query_names = self.generate_continous_query_names()
        old_continuous_query_names = set(existing_continuous_query_names) - set(new_continuous_query_names)

        for continous_query_name in old_continuous_query_names:
            self.drop_continuous_query(continous_query_name)
            changed = True

        return changed


    def maintain_continuous_queries(self):
        continuous_queries_changed = False

        for measurement in self.measurements:

            if self.state == 'present':
                if self.create_continuous_queries(measurement):
                    continuous_queries_changed = True
            elif self.state == 'absent':
                if self.drop_continuous_queries(measurement):
                    continuous_queries_changed = True

        if self.prune:
            if self.prune_continuous_queries():
                continuous_queries_changed = True

        return continuous_queries_changed

def main():
    module = AnsibleModule(
        argument_spec=dict(
            login_user=dict(required=True),
            login_password=dict(required=True),
            login_host=dict(default='localhost'),
            login_port=dict(default='8086'),
            database=dict(required=True),
            retentions=dict(required=True),
            measurements=dict(required=True, type='list'),
            state=dict(default='present', choices=['present','absent']),
            prune=dict(default=False, type='bool')
        )
    )

    if not influxdb_found:
        module.fail_json(msg='the python influxdb package is required')

    continuous_queries_changed = InfluxDBDownsample(module).maintain_continuous_queries()

    module.exit_json(changed=continuous_queries_changed)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
